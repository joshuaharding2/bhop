<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Three.js Floating World</title>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
   <style>
       body { margin: 0; overflow: hidden; }
   </style>
</head>
<body>
<input type="file" id="fileInput" style="display: none;" accept=".json">
<script>
   let scene, camera, renderer;
   let keys = { w: false, a: false, s: false, d: false, space: false };
   let velocity = new THREE.Vector3(0, 0, 0);
   let speed = 0.5;
   let gravity = -0.01;
   let jumpPower = 0.25;
   let isJumping = false;
   let collidableObjects = [];
   let objectsInScene = [];
   let strafeDirection = 0;
   let strafeTime = 0
   const startPosition = new THREE.Vector3(0, 1, 5); // Reset position


   function init() {
       scene = new THREE.Scene();
       camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
       camera.position.set(0, 1, 5);


       renderer = new THREE.WebGLRenderer();
       renderer.setSize(window.innerWidth, window.innerHeight);
       document.body.appendChild(renderer.domElement);


       createRooms();


       window.addEventListener("resize", () => {
           renderer.setSize(window.innerWidth, window.innerHeight);
           camera.aspect = window.innerWidth / window.innerHeight;
           camera.updateProjectionMatrix();
       });


       window.addEventListener("keydown", (event) => {
   if (event.key in keys) keys[event.key] = true;  // Update the keys object for the pressed key
   if (event.key === ' ') {  // For spacebar press
       keys.space = true;  // Track spacebar press
   }
   if (event.key === 'p') document.getElementById('fileInput').click();
   if (event.key === 'r') resetPlayer();
});


window.addEventListener("keyup", (event) => {
   if (event.key in keys) keys[event.key] = false;  // Update the keys object for the released key
   if (event.key === ' ') {  // For spacebar release
       keys.space = false;  // Track spacebar release
   }
});


       document.getElementById('fileInput').addEventListener('change', handleFileImport);


       animate();
   }


   function createRooms() {
       function createRoom(x, y, z) {
           const geometry = new THREE.BoxGeometry(10, 10, 10);
           const material = new THREE.MeshBasicMaterial({ color: Math.random() * 0xffffff, wireframe: true });
           const room = new THREE.Mesh(geometry, material);
           room.position.set(x, y, z);
           scene.add(room);
           objectsInScene.push(room);


           // Add bounding box for collision detection
           const boundingBox = new THREE.Box3().setFromObject(room);
           collidableObjects.push({ mesh: room, box: boundingBox });
       }


       createRoom(0, 0, 0);   // Main room
       createRoom(15, 0, 0);  // Side room 1
       createRoom(-15, 0, 0); // Side room 2
       createRoom(0, 15, 0);  // Side room 3 (above)
       createRoom(0, -15, 0); // Side room 4 (below)
   }


   function clearScene() {
       objectsInScene.forEach(obj => scene.remove(obj));
       objectsInScene = [];
       collidableObjects = [];
   }


   function handleFileImport(event) {
       const file = event.target.files[0];
       if (!file) return;


       const reader = new FileReader();
       reader.onload = function(e) {
           const levelData = JSON.parse(e.target.result);
           clearScene();
           loadLevel(levelData);
       };
       reader.readAsText(file);
   }


   function loadLevel(levelData) {
       levelData.forEach(box => {
           let width = Math.abs(box.end.x - box.start.x) || 1;
           let height = Math.abs(box.end.y - box.start.y) || 1;
           let depth = Math.abs(box.end.z - box.start.z) || 1;


           let geometry = new THREE.BoxGeometry(width, height, depth);
           let material = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });
           let mesh = new THREE.Mesh(geometry, material);


           mesh.position.set(
               (box.start.x + box.end.x) / 2,
               (box.start.y + box.end.y) / 2,
               (box.start.z + box.end.z) / 2
           );


           scene.add(mesh);
           objectsInScene.push(mesh);


           // Add bounding box for collision detection
           const boundingBox = new THREE.Box3().setFromObject(mesh);
           collidableObjects.push({ mesh: mesh, box: boundingBox });
       });
   }


   function checkCollisions(position) {
       let playerBox = new THREE.Box3().setFromCenterAndSize(position, new THREE.Vector3(1, 2, 1));
       return collidableObjects.some(obj => obj.box.intersectsBox(playerBox));
   }


       function resetPlayer() {
       camera.position.copy(startPosition);
       velocity.set(0, 0, 0);
       isGrounded = false;
   }




function jump() {
   if (isGrounded) {  // Only jump if grounded
       velocity.y = jumpPower; // Apply jump force
       isGrounded = false;  // Mark the player as no longer grounded
   }
}


function animate() {
   requestAnimationFrame(animate);


   let direction = new THREE.Vector3();
   camera.getWorldDirection(direction);


   let nextPosition = camera.position.clone();
   if (keys.a || keys.d) nextPosition.addScaledVector(direction, speed);
   if (keys.s) nextPosition.addScaledVector(direction, -speed);
   if (keys.a) strafeDirection = 0.08;
   else if (keys.d) strafeDirection = -0.08;
   else strafeDirection = 0;
   if (keys.space) jump();


   // Apply gravity
   velocity.y += gravity;
   nextPosition.y += velocity.y;
   camera.rotateY(strafeDirection);


   // Check for collisions
   if (!checkCollisions(nextPosition)) {
       camera.position.copy(nextPosition);
   } else {
       // Reset jump if we hit the ground
       if (velocity.y < 0) {
           velocity.y = 0;
           isGrounded = true;  // Set the player as grounded again
       }
   }


   renderer.render(scene, camera);
}






   init();
</script>
</body>
</html>

